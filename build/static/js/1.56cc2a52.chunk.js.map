{"version":3,"sources":["helpers/Contract-Calls/gachyiCalls.js"],"names":["fetchInfo","addr","user","exportInstance","gooAbi","abi","gooContract","categories","totalSupply","price","token","fetchUserBal","contract","balanceOf","balance","testMint","qty","from","evt","emit","parseFloat","parseInt","estimateGas","mintTokens","JSON","stringify","includes","getcateg","toString","erc20Abi","erc20","bal","convertToEth","BigNumber","console","log","approve","contracts","gachyiland","txn","wait"],"mappings":"s/ZAWaA,EAAS,iDAAG,WAAOC,EAAKC,GAAZ,qGACGC,YAAeF,EAAMG,EAAOC,KAD/B,cACjBC,EADiB,yBAGIA,EAAYC,WAJ/B,GACe,cAGfA,EAHe,gBAIKD,EAAYE,cAJjB,cAIfA,EAJe,yBAKZ,CAACD,EAAWE,MAAMF,EAAWG,MAAMF,IALvB,2HAAH,wDAWPG,EAAY,iDAAG,WAAOV,GAAP,mGAELE,YAAeF,EAAMG,EAAOC,KAFvB,cAEtBO,EAFsB,yBAIJA,EAASC,YAJL,cAIpBC,EAJoB,yBAKjBA,GALiB,2HAAH,sDAUZC,EAAQ,iDAAG,WAAQd,EAAKe,EAAIP,EAAMQ,GAAvB,gGACtBC,IAAIC,KAAK,aAAa,mBACtBV,EAAQW,WAAWX,GAASY,SAASL,GAFf,SAGEb,YAAeF,EAAMG,EAAOC,KAH9B,cAGlBC,EAHkB,yBAMAA,EAAYgB,YAAYC,WA5BxC,EA4BwDP,EAAK,CAAEC,KAAMA,IANrD,4DAQXM,EAAWP,EAAIC,IARJ,8DAWjBO,KAAKC,UAAL,MAAkBC,SAAS,0BAXV,kCAYG1B,EAAU,GAZb,eAYd2B,EAZc,iBAaCxB,YAAewB,EAAS,GAAGC,WAAYC,GAbxC,eAabC,EAba,iBAcDA,EAAMjB,UAAUI,GAdf,WAcbc,EAda,OAejBA,EAAKC,YAAa,IAAIC,IAAUF,EAAIH,aACpCM,QAAQC,IAAI,oBAAoBJ,KAC7BX,WAAWW,GAAKtB,GAjBF,4CAoBGqB,EAAMM,QAAQC,IAAUC,WAAW,sBAAsB,CAACrB,KAAKA,IApBlE,eAoBVsB,EApBU,OAqBdrB,IAAIC,KAAK,aAAa,sBArBR,UAsBFoB,EAAIC,OAtBF,eAsBdD,EAtBc,OAuBdrB,IAAIC,KAAK,aAAa,oBAvBR,kBAwBP,CAACoB,GAAI,IAxBE,0CA2BdrB,IAAIC,KAAK,YAAY,wBA3BP,kBA4BP,CAAC,EAAD,IAAO,IA5BA,uCA+BhBD,IAAIC,KAAK,YAAY,sBA/BL,kBAgCT,CAAC,sBAAqB,IAhCb,YAmCjBK,KAAKC,UAAL,MAAkBC,SAAS,mCAnCV,wBAoClBQ,QAAQC,IAAI,YACZjB,IAAIC,KAAK,YAAY,sBArCH,kBAsCX,CAAC,sBAAqB,IAtCX,kEAAH,4DA0ChBI,EAAU,iDAAG,WAAQP,EAAKC,GAAb,0FAClBC,IAAIC,KAAK,aAAa,kBADJ,SAEQhB,YAAekC,IAAUC,WAAYlC,EAAOC,KAFpD,cAEZC,EAFY,yBAIGA,EAAYiB,WApEzB,EAoEyCP,EAAK,CAAEC,KAAMA,IAJ5C,cAIVsB,EAJU,iBAKFA,EAAIC,OALF,eAKdD,EALc,OAMdrB,IAAIC,KAAK,aAAa,gBANR,kBAOPoB,GAPO,yCASdrB,IAAIC,KAAK,YAAY,oBATP,kFAAH","file":"static/js/1.56cc2a52.chunk.js","sourcesContent":["\nimport { MAX_ALLOWANCE_AMOUNT } from \"../constants\";\nimport erc20Abi from \"../../config/abis/erc20.json\";\nimport gooAbi from \"../../config/abis/gachiyland.json\"\nimport { exportInstance } from \"../../apiServices\";\nimport contracts from \"../../config/contracts\";\nimport { convertToEth } from \"../../helpers/numberFormatter\";\nimport BigNumber from \"bignumber.js\";\nimport evt from \"../../events/events\"\n\nconst cID=0;\nexport const fetchInfo = async (addr,user) => {\n    let gooContract = await exportInstance(addr, gooAbi.abi);\n    try {\n      let categories = await gooContract.categories(cID)\n      let totalSupply = await gooContract.totalSupply();\n      return [categories.price,categories.token,totalSupply] ;\n      return categories;\n    } catch (e) {\n      return e;\n    }\n  };\n  export const fetchUserBal = async (addr) => {\n  \n    let contract = await exportInstance(addr, gooAbi.abi); \n    try {\n      let balance = await contract.balanceOf();\n      return balance;\n    } catch (e) {\n       return e;\n    }\n  };\n  export const testMint = async ( addr,qty,price,from) => {\n    evt.emit('txn-status',\"initiate loader\");\n    price = parseFloat(price) * parseInt(qty);\n    let gooContract = await exportInstance(addr, gooAbi.abi);\n    \n    try {\n      let result  = await gooContract.estimateGas.mintTokens(cID, qty, { from: from})\n      if(result){\n        return mintTokens(qty,from)\n      }\n    } catch (e) {\n      if(JSON.stringify(e).includes(\"insufficient allowance\")){\n        let getcateg = await fetchInfo(0);\n         let erc20 = await exportInstance(getcateg[1].toString(), erc20Abi);\n         let bal = await erc20.balanceOf(from);\n         bal =convertToEth(new BigNumber(bal.toString()));\n         console.log(\"Balance of user :\",bal);\n         if(parseFloat(bal)>price){\n          //  let txn  = await erc20.approve(contracts.gachyiland,MAX_ALLOWANCE_AMOUNT,{from:from})\n          try {\n            let txn  = await erc20.approve(contracts.gachyiland,\"1000000000000000000\",{from:from})\n            evt.emit('txn-status',\"approval-initiated\");\n            txn = await txn.wait()\n            evt.emit('txn-status',\"approval-succeed\");\n            return [txn,true];\n            \n          } catch (error) {\n            evt.emit('txn-error',\"user-denied-approval\");\n            return [error,false];\n          }\n         }else{\n          evt.emit('txn-error',\"not enough balance\");\n          return [\"not enough balance\",false];\n         }\n      }\n      if(JSON.stringify(e).includes(\"transfer amount exceeds balance\")){\n        console.log(\"no money\");\n        evt.emit('txn-error',\"not enough balance\");\n        return [\"not enough balance\",false];\n      }\n    }\n  }\n const mintTokens = async ( qty, from) => {\n  evt.emit('txn-status',\"mint-initiated\");\n    let gooContract = await exportInstance(contracts.gachyiland, gooAbi.abi);\n    try {\n      let txn  = await gooContract.mintTokens(cID, qty, { from: from})\n      txn = await txn.wait()\n      evt.emit('txn-status',\"mint-succeed\");\n      return txn;\n    } catch (e) {\n      evt.emit('txn-error',\"user-denied-mint\");\n      return e;\n    }\n  \n  };"],"sourceRoot":""}